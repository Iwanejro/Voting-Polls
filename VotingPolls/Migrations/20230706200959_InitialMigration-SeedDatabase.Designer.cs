// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VotingPolls.Data;

#nullable disable

namespace VotingPolls.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230706200959_InitialMigration-SeedDatabase")]
    partial class InitialMigrationSeedDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VotingPolls.Data.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VotingPollId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("VotingPollId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "1de47819-99ec-4882-800a-5277c4a58df4",
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6338),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6344),
                            Number = 0,
                            Text = "Baha Men",
                            VotingPollId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = "1de47819-99ec-4882-800a-5277c4a58df4",
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6352),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6356),
                            Number = 1,
                            Text = "I did",
                            VotingPollId = 1
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = "1de47819-99ec-4882-800a-5277c4a58df4",
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6361),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6395),
                            Number = 2,
                            Text = "Nobody knows",
                            VotingPollId = 1
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = "d797574c-6e0a-483e-a639-73f3203c9f85",
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6401),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6405),
                            Number = 0,
                            Text = "This one",
                            VotingPollId = 2
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = "d797574c-6e0a-483e-a639-73f3203c9f85",
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6410),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6414),
                            Number = 1,
                            Text = "This one",
                            VotingPollId = 2
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = "d797574c-6e0a-483e-a639-73f3203c9f85",
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6419),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6422),
                            Number = 2,
                            Text = "This one",
                            VotingPollId = 2
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = "f351991b-d3d7-4abd-a4c5-36337b91fbfd",
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6428),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6431),
                            Number = 0,
                            Text = "An intense feeling of deep affection",
                            VotingPollId = 3
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = "f351991b-d3d7-4abd-a4c5-36337b91fbfd",
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6437),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6440),
                            Number = 1,
                            Text = "Baby don't hurt me",
                            VotingPollId = 3
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = "cb994c3c-a4d5-4540-af5a-dffea8451899",
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6446),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6450),
                            Number = 0,
                            Text = "What's updog?",
                            VotingPollId = 4
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = "cb994c3c-a4d5-4540-af5a-dffea8451899",
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6647),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6661),
                            Number = 1,
                            Text = "Nice try!",
                            VotingPollId = 4
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = "c7fe7a3f-a42f-4514-ab2a-8c47a53a09cc",
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6728),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6733),
                            Number = 0,
                            Text = "Yes",
                            VotingPollId = 5
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = "c7fe7a3f-a42f-4514-ab2a-8c47a53a09cc",
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6738),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6742),
                            Number = 1,
                            Text = "No",
                            VotingPollId = 5
                        });
                });

            modelBuilder.Entity("VotingPolls.Data.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VotingPollId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("VotingPollId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "1de47819-99ec-4882-800a-5277c4a58df4",
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(7038),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(7044),
                            Text = "Simple indeed.",
                            VotingPollId = 5
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = "d797574c-6e0a-483e-a639-73f3203c9f85",
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(7050),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(7054),
                            Text = "Haha, nice question!",
                            VotingPollId = 1
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = "1de47819-99ec-4882-800a-5277c4a58df4",
                            DateCreated = new DateTime(2023, 7, 6, 22, 14, 59, 597, DateTimeKind.Local).AddTicks(7060),
                            DateModified = new DateTime(2023, 7, 6, 22, 14, 59, 597, DateTimeKind.Local).AddTicks(7066),
                            Text = "Thx man!",
                            VotingPollId = 1
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = "f351991b-d3d7-4abd-a4c5-36337b91fbfd",
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(7073),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(7077),
                            Text = "It was a difficult decision.",
                            VotingPollId = 2
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = "cb994c3c-a4d5-4540-af5a-dffea8451899",
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(7083),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(7087),
                            Text = "I love this song.",
                            VotingPollId = 3
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = "f351991b-d3d7-4abd-a4c5-36337b91fbfd",
                            DateCreated = new DateTime(2023, 7, 6, 22, 14, 59, 597, DateTimeKind.Local).AddTicks(7092),
                            DateModified = new DateTime(2023, 7, 6, 22, 14, 59, 597, DateTimeKind.Local).AddTicks(7096),
                            Text = "Yeah, me too!",
                            VotingPollId = 3
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = "c7fe7a3f-a42f-4514-ab2a-8c47a53a09cc",
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(7101),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(7105),
                            Text = "Nobody will fall for that.",
                            VotingPollId = 4
                        });
                });

            modelBuilder.Entity("VotingPolls.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1de47819-99ec-4882-800a-5277c4a58df4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5088bcc-d9f6-40f1-be6f-14fd32b88d84",
                            Email = "Benedict1@mail.com",
                            EmailConfirmed = true,
                            Firstname = "Budapest",
                            Lastname = "Pumpkinpatch",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENEDICT1@MAIL.COM",
                            NormalizedUserName = "BENEDICT1@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHz0QZMgc9wq6G86TnzBIWEm8NlQav6LPoatXr/bHfokWlHzzaFKSHn2RSJQE4Q1Ew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fef98c95-352c-4a76-aa4c-033de00956a2",
                            TwoFactorEnabled = false,
                            UserName = "Benedict1@mail.com"
                        },
                        new
                        {
                            Id = "d797574c-6e0a-483e-a639-73f3203c9f85",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54eb74eb-dd81-48ba-beea-369013b44efb",
                            Email = "Benedict2@mail.com",
                            EmailConfirmed = true,
                            Firstname = "Beezlebub",
                            Lastname = "Wafflesmack",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENEDICT2@MAIL.COM",
                            NormalizedUserName = "BENEDICT2@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBCLFvwBmX6wCAB9gVxAefUkotBEmMtLlf3B1eTI4PoTiO/F8q847YdN3EEgaOZtgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc01d6f8-91d8-4335-9766-7a5cb783250e",
                            TwoFactorEnabled = false,
                            UserName = "Benedict2@mail.com"
                        },
                        new
                        {
                            Id = "f351991b-d3d7-4abd-a4c5-36337b91fbfd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "091cff7f-264f-4812-a247-06901d45488d",
                            Email = "Benedict3@mail.com",
                            EmailConfirmed = true,
                            Firstname = "Buckingham",
                            Lastname = "Ampersand",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENEDICT3@MAIL.COM",
                            NormalizedUserName = "BENEDICT3@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGowfwB/uar6xP2RKUSmjjioXzgIRKRwiylDxbyHQbJKShsSHgyWoXtJQ3loPFEEEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8749102-c22c-498d-a6ca-40b438bdb02e",
                            TwoFactorEnabled = false,
                            UserName = "Benedict3@mail.com"
                        },
                        new
                        {
                            Id = "cb994c3c-a4d5-4540-af5a-dffea8451899",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81f9fd2a-7ecb-4edc-b4b1-91136085ee8c",
                            Email = "Benedict4@mail.com",
                            EmailConfirmed = true,
                            Firstname = "Butternut",
                            Lastname = "Crinkle-Fries",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENEDICT4@MAIL.COM",
                            NormalizedUserName = "BENEDICT4@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMycq811wkHchhEDSs70lfznrBjSMXBBsNspipEP46/f3nBbrHGumF8i+gQqcGztMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb88ddab-1203-4d88-84d6-1d0c21386a11",
                            TwoFactorEnabled = false,
                            UserName = "Benedict4@mail.com"
                        },
                        new
                        {
                            Id = "c7fe7a3f-a42f-4514-ab2a-8c47a53a09cc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aff6c221-7ccd-4e9f-bd1b-fb655944b927",
                            Email = "Benedict5@mail.com",
                            EmailConfirmed = true,
                            Firstname = "Baseballbat",
                            Lastname = "Tennismatch",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENEDICT5@MAIL.COM",
                            NormalizedUserName = "BENEDICT5@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB9T89jDtwBO6G2fV1uWtVegWHzxab7khhi/9kHO8JAB/FGjA9vlBJSfuccJfknx/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3919884b-2987-4347-a67f-2a364d4d23c7",
                            TwoFactorEnabled = false,
                            UserName = "Benedict5@mail.com"
                        });
                });

            modelBuilder.Entity("VotingPolls.Data.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VotingPollId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("VoterId");

                    b.HasIndex("VotingPollId");

                    b.ToTable("Votes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnswerId = 1,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6798),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6804),
                            VoterId = "d797574c-6e0a-483e-a639-73f3203c9f85",
                            VotingPollId = 1
                        },
                        new
                        {
                            Id = 2,
                            AnswerId = 2,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6810),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6814),
                            VoterId = "f351991b-d3d7-4abd-a4c5-36337b91fbfd",
                            VotingPollId = 1
                        },
                        new
                        {
                            Id = 3,
                            AnswerId = 3,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6819),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6823),
                            VoterId = "cb994c3c-a4d5-4540-af5a-dffea8451899",
                            VotingPollId = 1
                        },
                        new
                        {
                            Id = 4,
                            AnswerId = 1,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6828),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6831),
                            VoterId = "c7fe7a3f-a42f-4514-ab2a-8c47a53a09cc",
                            VotingPollId = 1
                        },
                        new
                        {
                            Id = 5,
                            AnswerId = 1,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6836),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6840),
                            VoterId = "f351991b-d3d7-4abd-a4c5-36337b91fbfd",
                            VotingPollId = 1
                        },
                        new
                        {
                            Id = 6,
                            AnswerId = 4,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6847),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6850),
                            VoterId = "d797574c-6e0a-483e-a639-73f3203c9f85",
                            VotingPollId = 2
                        },
                        new
                        {
                            Id = 7,
                            AnswerId = 5,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6856),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6860),
                            VoterId = "f351991b-d3d7-4abd-a4c5-36337b91fbfd",
                            VotingPollId = 2
                        },
                        new
                        {
                            Id = 8,
                            AnswerId = 6,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6866),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6870),
                            VoterId = "cb994c3c-a4d5-4540-af5a-dffea8451899",
                            VotingPollId = 2
                        },
                        new
                        {
                            Id = 9,
                            AnswerId = 6,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6875),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6879),
                            VoterId = "c7fe7a3f-a42f-4514-ab2a-8c47a53a09cc",
                            VotingPollId = 2
                        },
                        new
                        {
                            Id = 10,
                            AnswerId = 8,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6885),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6889),
                            VoterId = "d797574c-6e0a-483e-a639-73f3203c9f85",
                            VotingPollId = 3
                        },
                        new
                        {
                            Id = 11,
                            AnswerId = 7,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6894),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6897),
                            VoterId = "f351991b-d3d7-4abd-a4c5-36337b91fbfd",
                            VotingPollId = 3
                        },
                        new
                        {
                            Id = 12,
                            AnswerId = 8,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6903),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6907),
                            VoterId = "cb994c3c-a4d5-4540-af5a-dffea8451899",
                            VotingPollId = 3
                        },
                        new
                        {
                            Id = 13,
                            AnswerId = 8,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6913),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6917),
                            VoterId = "c7fe7a3f-a42f-4514-ab2a-8c47a53a09cc",
                            VotingPollId = 3
                        },
                        new
                        {
                            Id = 14,
                            AnswerId = 10,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6922),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6926),
                            VoterId = "d797574c-6e0a-483e-a639-73f3203c9f85",
                            VotingPollId = 4
                        },
                        new
                        {
                            Id = 15,
                            AnswerId = 10,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6930),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6934),
                            VoterId = "f351991b-d3d7-4abd-a4c5-36337b91fbfd",
                            VotingPollId = 4
                        },
                        new
                        {
                            Id = 16,
                            AnswerId = 10,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6939),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6943),
                            VoterId = "cb994c3c-a4d5-4540-af5a-dffea8451899",
                            VotingPollId = 4
                        },
                        new
                        {
                            Id = 17,
                            AnswerId = 10,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6948),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6951),
                            VoterId = "c7fe7a3f-a42f-4514-ab2a-8c47a53a09cc",
                            VotingPollId = 4
                        },
                        new
                        {
                            Id = 18,
                            AnswerId = 11,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6956),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6960),
                            VoterId = "d797574c-6e0a-483e-a639-73f3203c9f85",
                            VotingPollId = 5
                        },
                        new
                        {
                            Id = 19,
                            AnswerId = 11,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6965),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6969),
                            VoterId = "f351991b-d3d7-4abd-a4c5-36337b91fbfd",
                            VotingPollId = 5
                        },
                        new
                        {
                            Id = 20,
                            AnswerId = 12,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6975),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6979),
                            VoterId = "cb994c3c-a4d5-4540-af5a-dffea8451899",
                            VotingPollId = 5
                        },
                        new
                        {
                            Id = 21,
                            AnswerId = 12,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6986),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6990),
                            VoterId = "c7fe7a3f-a42f-4514-ab2a-8c47a53a09cc",
                            VotingPollId = 5
                        });
                });

            modelBuilder.Entity("VotingPolls.Data.VotingPoll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AdditionalAnswers")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MultipleChoice")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("VotingPolls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalAnswers = true,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(5912),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6125),
                            MultipleChoice = true,
                            Name = "Poll about dogs",
                            OwnerId = "1de47819-99ec-4882-800a-5277c4a58df4",
                            Question = "Who let the dogs out?"
                        },
                        new
                        {
                            Id = 2,
                            AdditionalAnswers = true,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6135),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6139),
                            MultipleChoice = false,
                            Name = "Very importart poll",
                            OwnerId = "d797574c-6e0a-483e-a639-73f3203c9f85",
                            Question = "Which answer is correct?"
                        },
                        new
                        {
                            Id = 3,
                            AdditionalAnswers = false,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6145),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6168),
                            MultipleChoice = true,
                            Name = "Philosophical poll",
                            OwnerId = "f351991b-d3d7-4abd-a4c5-36337b91fbfd",
                            Question = "What is love?"
                        },
                        new
                        {
                            Id = 4,
                            AdditionalAnswers = false,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6181),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6185),
                            MultipleChoice = false,
                            Name = "Tricky poll",
                            OwnerId = "cb994c3c-a4d5-4540-af5a-dffea8451899",
                            Question = "Does it smell like updog in here?"
                        },
                        new
                        {
                            Id = 5,
                            AdditionalAnswers = true,
                            DateCreated = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6191),
                            DateModified = new DateTime(2023, 7, 6, 22, 9, 59, 597, DateTimeKind.Local).AddTicks(6195),
                            MultipleChoice = false,
                            Name = "Simple poll",
                            OwnerId = "c7fe7a3f-a42f-4514-ab2a-8c47a53a09cc",
                            Question = "YES or NO?"
                        });
                });

            modelBuilder.Entity("VotingPolls.Data.VotingPollComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("VotingPollId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("VotingPollId");

                    b.ToTable("VotingPollsComments");
                });

            modelBuilder.Entity("VotingPolls.Data.VotingPollUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VotingPollId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VotingPollId");

                    b.ToTable("VotingPollsUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "1de47819-99ec-4882-800a-5277c4a58df4",
                            VotingPollId = 2
                        },
                        new
                        {
                            Id = 2,
                            UserId = "1de47819-99ec-4882-800a-5277c4a58df4",
                            VotingPollId = 3
                        },
                        new
                        {
                            Id = 3,
                            UserId = "1de47819-99ec-4882-800a-5277c4a58df4",
                            VotingPollId = 4
                        },
                        new
                        {
                            Id = 4,
                            UserId = "1de47819-99ec-4882-800a-5277c4a58df4",
                            VotingPollId = 5
                        },
                        new
                        {
                            Id = 5,
                            UserId = "d797574c-6e0a-483e-a639-73f3203c9f85",
                            VotingPollId = 1
                        },
                        new
                        {
                            Id = 6,
                            UserId = "d797574c-6e0a-483e-a639-73f3203c9f85",
                            VotingPollId = 3
                        },
                        new
                        {
                            Id = 7,
                            UserId = "d797574c-6e0a-483e-a639-73f3203c9f85",
                            VotingPollId = 4
                        },
                        new
                        {
                            Id = 8,
                            UserId = "d797574c-6e0a-483e-a639-73f3203c9f85",
                            VotingPollId = 5
                        },
                        new
                        {
                            Id = 9,
                            UserId = "f351991b-d3d7-4abd-a4c5-36337b91fbfd",
                            VotingPollId = 1
                        },
                        new
                        {
                            Id = 10,
                            UserId = "f351991b-d3d7-4abd-a4c5-36337b91fbfd",
                            VotingPollId = 2
                        },
                        new
                        {
                            Id = 11,
                            UserId = "f351991b-d3d7-4abd-a4c5-36337b91fbfd",
                            VotingPollId = 4
                        },
                        new
                        {
                            Id = 12,
                            UserId = "f351991b-d3d7-4abd-a4c5-36337b91fbfd",
                            VotingPollId = 5
                        },
                        new
                        {
                            Id = 13,
                            UserId = "cb994c3c-a4d5-4540-af5a-dffea8451899",
                            VotingPollId = 1
                        },
                        new
                        {
                            Id = 14,
                            UserId = "cb994c3c-a4d5-4540-af5a-dffea8451899",
                            VotingPollId = 2
                        },
                        new
                        {
                            Id = 15,
                            UserId = "cb994c3c-a4d5-4540-af5a-dffea8451899",
                            VotingPollId = 3
                        },
                        new
                        {
                            Id = 16,
                            UserId = "cb994c3c-a4d5-4540-af5a-dffea8451899",
                            VotingPollId = 5
                        },
                        new
                        {
                            Id = 17,
                            UserId = "c7fe7a3f-a42f-4514-ab2a-8c47a53a09cc",
                            VotingPollId = 1
                        },
                        new
                        {
                            Id = 18,
                            UserId = "c7fe7a3f-a42f-4514-ab2a-8c47a53a09cc",
                            VotingPollId = 2
                        },
                        new
                        {
                            Id = 19,
                            UserId = "c7fe7a3f-a42f-4514-ab2a-8c47a53a09cc",
                            VotingPollId = 3
                        },
                        new
                        {
                            Id = 20,
                            UserId = "c7fe7a3f-a42f-4514-ab2a-8c47a53a09cc",
                            VotingPollId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VotingPolls.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VotingPolls.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VotingPolls.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VotingPolls.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VotingPolls.Data.Answer", b =>
                {
                    b.HasOne("VotingPolls.Data.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VotingPolls.Data.VotingPoll", "VotingPoll")
                        .WithMany("Answers")
                        .HasForeignKey("VotingPollId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("VotingPoll");
                });

            modelBuilder.Entity("VotingPolls.Data.Comment", b =>
                {
                    b.HasOne("VotingPolls.Data.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VotingPolls.Data.VotingPoll", "VotingPoll")
                        .WithMany("Comments")
                        .HasForeignKey("VotingPollId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("VotingPoll");
                });

            modelBuilder.Entity("VotingPolls.Data.Vote", b =>
                {
                    b.HasOne("VotingPolls.Data.Answer", "Answer")
                        .WithMany("Votes")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("VotingPolls.Data.User", "Voter")
                        .WithMany()
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VotingPolls.Data.VotingPoll", "VotingPoll")
                        .WithMany("Votes")
                        .HasForeignKey("VotingPollId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Voter");

                    b.Navigation("VotingPoll");
                });

            modelBuilder.Entity("VotingPolls.Data.VotingPoll", b =>
                {
                    b.HasOne("VotingPolls.Data.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("VotingPolls.Data.VotingPollComment", b =>
                {
                    b.HasOne("VotingPolls.Data.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VotingPolls.Data.VotingPoll", "VotingPoll")
                        .WithMany()
                        .HasForeignKey("VotingPollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("VotingPoll");
                });

            modelBuilder.Entity("VotingPolls.Data.VotingPollUser", b =>
                {
                    b.HasOne("VotingPolls.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VotingPolls.Data.VotingPoll", "VotingPoll")
                        .WithMany()
                        .HasForeignKey("VotingPollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VotingPoll");
                });

            modelBuilder.Entity("VotingPolls.Data.Answer", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("VotingPolls.Data.VotingPoll", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Comments");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
